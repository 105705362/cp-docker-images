#!/usr/bin/env python

from __future__ import print_function

import os
import sys
from jinja2 import Environment, FileSystemLoader
import socket
import time


def parse_log4j_loggers(overrides_str, defaults={}):
    overrides = overrides_str.split(",")
    if len(overrides) > 0:
        for override in overrides:
            tokens = override.split("=")
            if len(tokens) == 2:
                defaults[tokens[0]] = tokens[1]
    return defaults


def wait_for_service(host, port, timeout):
    start = time.time()

    while True:
        try:
            s = socket.create_connection((host, port), timeout)
            s.close()
            return True
        except socket.error:
            pass

        time.sleep(1)

        if time.time() - start > timeout:
            return False


def check_path_for_permissions(path, mode):
    string_to_mode_map = {"writable": os.W_OK, "readable": os.R_OK, "executable": os.X_OK, "exists": os.F_OK}
    return os.access(path, string_to_mode_map[mode])


def exit_if_absent(env_var):
    if not os.environ.get(env_var):
        print("%s is required." % (env_var,))
        return False
    return True


def fill_and_write_template(template_file, output_file, context=os.environ):
    try:
        j2_env = Environment(
            loader=FileSystemLoader(searchpath="/"),
            trim_blocks=True)
        j2_env.globals['parse_log4j_loggers'] = parse_log4j_loggers
        with open(output_file, 'w') as f:
            template = j2_env.get_template(template_file)
            f.write(template.render(env=context))

        return True
    except Exception, e:
        print(e, file=sys.stderr)
        return False


if __name__ == '__main__':

    import argparse
    root = argparse.ArgumentParser(description='Docker Utility Belt.')

    actions = root.add_subparsers(help='Actions', dest='action')

    template = actions.add_parser('template', description='Generate template from env vars.')
    template.add_argument('input', help='Path to template file.')
    template.add_argument('output', help='Path of output file.')

    check_env = actions.add_parser('ensure', description='Check if env var exists.')
    check_env.add_argument('name', help='Name of env var.')

    check_env = actions.add_parser('wait', description='wait for network service to appear.')
    check_env.add_argument('host', help='Host.')
    check_env.add_argument('port', help='Host.', type=int)
    check_env.add_argument('timeout', help='timeout in secs.', type=float)

    check_env = actions.add_parser('path', description='Check for path permissions and existence.')
    check_env.add_argument('path', help='Full path.')
    check_env.add_argument('mode', help='One of [writable, readable, executable, exists].', choices=['writable', 'readable', 'executable', 'exists'])

    if len(sys.argv) < 2:
        root.print_help()
        sys.exit(1)

    args = root.parse_args()

    success = False

    if args.action == "template":
        success = fill_and_write_template(args.input, args.output)
    elif args.action == "ensure":
        success = exit_if_absent(args.name)
    elif args.action == "wait":
        success = wait_for_service(args.host, int(args.port), float(args.timeout))
    elif args.action == "path":
        success = check_path_for_permissions(args.path, args.mode)

    if success:
        sys.exit(0)
    else:
        sys.exit(1)
